@import './mixins';

@import './header.clr-addons';
@import './collapse-expand-section/collapse-expand-section';
@import './main-nav-group/main-nav-group';
@import './paged-search-result-list/paged-search-result-list';
@import './pager/pager';
@import './dot-pager/dot-pager';
@import './view-edit-section/view-edit-section';
@import './content-panel/content-panel';
@import './breadcrumb/breadcrumb';
@import './notification/notification';
@import './flow-bar/flow-bar';
@import './back-button/back-button';
@import './treetable/treetable';
@import './progress-spinner/progress-spinner';
@import './numericfield/numeric-field';
@import './date-time-container/date-time-container';
@import './searchfield/search-field';
@import './quick-list/quick-list';
@import './letter-avatar/letter-avatar';
@import './brand-avatar/brand-avatar';
@import './multilingual/multilingual';
@import './generic-quick-list/generic-quick-list';
@import './history/history.scss';
@import './location-bar/location-bar-node/location-bar-node.component.scss';
@import './html-editor/html/html-editor.component.scss';
@import './calendar/calendar.scss';

html,
body,
.main-container {
  height: 100%;
}

.main-container,
.u-main-container {
  > .content-container {
    border-top: var(--clr-global-borderwidth) solid var(--clr-border-color);
  }

  .content-header {
    padding: 0.5rem 0.5rem 0 1rem;
    display: flex;
    flex: 0 0 auto;

    h2 {
      margin-top: 0;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .command-bar {
      display: flex;
      flex: 1 0 auto;
      justify-content: flex-end;
      align-items: flex-start;
    }
  }
}

.content-container {
  // Define the sticky footer css when inside a content-container
  .content-area-footer {
    border-top: var(--clr-global-borderwidth) solid var(--clr-border-color);
    display: flex;
    flex: 0 0 auto;
    align-items: center;
    padding: 0.25rem 1rem;
    background-color: var(--clr-global-app-background);
    min-height: 2rem;

    // For some reason clarity sets the margin to 0 for dropdown buttons - we want the default btn margin inside the footer
    .dropdown .dropdown-toggle {
      margin-right: 0.5rem;
    }
  }
}

// Classes active and clickable add a border around the whole card.
// Classes card-active and selectable add a border to the left side only.
.card {
  .list-group-item.list-group-item-action:hover {
    background-color: var(--clr-global-selection-color);
    cursor: pointer;
  }

  &.active {
    box-shadow: 0 0.125rem 0 0 var(--clr-card-active-border-color);
    border: var(--clr-global-borderwidth) solid var(--clr-card-active-border-color);
    cursor: default;
    text-decoration: none;
    transform: translateY(-2px);
    transition: border 0.2s ease, transform 0.2s ease;

    &.clickable:hover {
      cursor: default;
    }
  }

  @mixin disable-card-clickable-hover() {
    &.clickable:hover {
      border-radius: var(--clr-card-border-radius);
      border-width: var(--clr-card-border-width);
      border-color: var(--clr-card-border-color);
      border-style: solid;
      box-shadow: var(--clr-card-box-shadow);
      cursor: default;
      transform: none;
      transition: none;

      &.active:hover {
        box-shadow: 0 0.125rem 0 0 var(--clr-card-active-border-color);
        border: var(--clr-global-borderwidth) solid var(--clr-card-active-border-color);
        transform: translateY(-2px);
      }
    }
  }

  @mixin card-active-after() {
    content: '';
    width: 0.1667rem;
    position: absolute;
    background: var(--clr-card-active-border-color);
    top: -1px;
    left: -1px;
    bottom: 0;
    border-top-left-radius: var(--clr-card-border-radius);
    border-bottom-left-radius: var(--clr-card-border-radius);
  }

  &.card-active::after {
    @include card-active-after();
  }

  @mixin card-handle-hover() {
    &.selectable:hover::after {
      @include card-active-after();
    }

    &.selectable:hover {
      border-radius: var(--clr-card-border-radius);
      border-width: var(--clr-card-border-width);
      border-color: var(--clr-card-border-color);
      border-style: solid;
      cursor: pointer;
      transform: translateY(-2px);
      transition: border 0.2s ease, transform 0.2s ease;
      z-index: 1;

      &.card-active:hover {
        cursor: default;
        transform: none;
        transition: none;
      }
    }
  }

  // firefox needs this, because the hover in @media (hover: hover) is not supported
  @-moz-document url-prefix() {
    @include card-handle-hover();
  }

  @media (hover: hover) {
    @include card-handle-hover();
  }

  @media (hover: none) {
    @include disable-card-clickable-hover();
  }

  &.card-placeholder {
    border-left-style: dashed;
    border-top-style: dashed;
    border-right-style: dashed;
  }
}

.main-container.open-hamburger-menu .header .header-nav.clr-nav-level-1 {
  .nav-link .nav-text,
  .nav-list > .nav-link {
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
    display: block;
  }
}

.datagrid-no-select-all .datagrid-header .datagrid-select .clr-checkbox-wrapper {
  display: none;
}

.datagrid-full-height {
  max-height: 100%;
}

.datagrid-filter {
  .datagrid-date-filter-input {
    width: 7rem;
  }
}

// Enable highlighting of rows in a table by adding a new class 'highlight'
.table {
  tbody {
    tr {
      &.highlight {
        background-color: var(--clr-global-selection-color);
      }
    }
  }
}

@mixin required-asterisk($color: var(--red-dark)) {
  position: relative;

  &:after {
    position: absolute;
    content: '*';
    font-size: 0.58479532rem; // Approximately 14px.
    line-height: 0.5rem;
    color: $color;
    margin-left: 0.25rem;
    margin-top: 0.25rem;
  }
}

form {
  .required {
    @include required-asterisk();
  }

  .required-multiple {
    @include required-asterisk(var(--orange-light));
  }
}

// Readonly checkboxes, radiobuttons
clr-radio-container[readonly][show-only-selected='true'] .clr-radio-wrapper input:not(:checked),
clr-checkbox-container[readonly][show-only-selected='true'] .clr-checkbox-wrapper input:not(:checked) {
  display: none;

  + label {
    display: none;
  }
}

clr-radio-container[readonly].readonly-danger .clr-radio-wrapper input[type='radio'],
clr-checkbox-container[readonly].readonly-danger .clr-checkbox-wrapper input[type='checkbox'] {
  &:checked + label {
    color: var(--clr-btn-danger-bg-color);

    &::before {
      border-color: var(--clr-btn-danger-bg-color);
    }
  }
}

clr-radio-container[readonly] .clr-radio-wrapper input[type='radio'],
clr-checkbox-container[readonly] .clr-checkbox-wrapper input[type='checkbox'] {
  pointer-events: none;

  + label {
    pointer-events: none;
  }

  + label::before {
    border: 0;
    border-radius: 0;
    box-shadow: none;
    transform: rotate(45deg);
    background: var(--clr-forms-radio-label-color);
    top: 0.5rem;
    left: 1px;
    width: 0.6rem;
    height: 1px;
  }

  + label::after {
    border: 0;
    border-radius: 0;
    content: '';
    display: inline-block;
    transform: rotate(-45deg);
    background: var(--clr-forms-radio-label-color);
    position: absolute;
    top: 0.5rem;
    left: 1px;
    width: 0.6rem;
    height: 1px;
  }

  &:checked {
    + label::before {
      content: '';
      background: none;
      box-shadow: none;
      border-left: 2px solid var(--clr-forms-checkbox-mark-color);
      border-bottom: 2px solid var(--clr-forms-checkbox-mark-color);
      border-color: var(--clr-btn-success-bg-color);
      position: absolute;
      top: 0.3rem;
      left: 0.1rem;
      width: 0.5rem;
      height: 0.3rem;
      transform: rotate(-45deg);
    }

    + label::after {
      content: none;
    }
  }
}

// FORM OVERRIDES BELOW

// forms should never be bigger than 1200px
form,
.form {
  max-width: 1200px;

  h4:not(:first-child) {
    margin-top: 2rem;
  }

  // Fix alignment of label & values
  .clr-control-label {
    line-height: inherit;
  }
}

// Set max width for the date picker - Only needs to be as wide as the displayed date
clr-date-container .clr-control-container {
  .clr-input-group {
    max-width: 7rem;

    .clr-input {
      max-width: 5.5rem;
    }
  }
}

.clr-input-group {
  width: 100%;
  max-width: 100%;

  &.clr-focus {
    width: 100%;
  }

  // Set all input widths inside a clr-input-group to 100% minus the icons width
  > .clr-input {
    // Except for the ClrDataListInput and ClrDate, because this one just looks terrible otherwise (clarity using diff icon here)
    &:not([clrdatalistinput]):not([clrdate]) {
      width: calc(100% - 1.5rem);
    }
  }
}

// Set the width of all inputs except time and date to 100%
.clr-input-wrapper {
  max-width: none;

  input:not([type='time']):not([clrdate]) {
    width: 100%;
  }
}

// Set the width of text areas and selects to 100%
.clr-control-container {
  .clr-textarea-wrapper textarea {
    width: 100%;
    flex: 1 0 auto;
  }

  .clr-select-wrapper {
    display: block;

    select {
      width: 100%;
    }
  }
}

// This avoids the disposition of the clr select arrow icon if a validation error occurs.
.clr-error {
  .clr-select-wrapper::after {
    right: 0.25rem;
  }
}

.text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.btn clr-icon {
  transform: translate3d(0, -0.1rem, 0);
}

.clr-treenode-link:hover:visited {
  color: inherit;
}

.clr-max-width {
  max-width: $clr-max-width;
}
.datagrid-row-master {
  background-color: inherit !important;
}
.datagrid-row-sticky,
clr-expandable-animation {
  background-color: inherit !important;
}
.datagrid-row {
  background-color: $white;
}

.datagrid-highlight-error {
  background-color: $clr-highlight-error-100;

  &:hover,
  &.datagrid-selected {
    background-color: $clr-highlight-error-200 !important;
  }
}

.datagrid-highlight-success {
  background-color: $clr-highlight-success-50;

  &:hover,
  &.datagrid-selected {
    background-color: $clr-highlight-success-100;
  }
}

.datagrid-highlight-warning {
  background-color: $clr-highlight-warning-100;

  &:hover,
  &.datagrid-selected {
    background-color: $clr-highlight-warning-200;
  }
}

.datagrid-highlight-info {
  background-color: $clr-highlight-info-50;

  &:hover,
  &.datagrid-selected {
    background-color: $clr-highlight-info-100;
  }
}

.highlight-text-error {
  color: $clr-highlight-error-800;

  cds-icon {
    fill: $clr-highlight-error-800;
  }

  &:hover {
    color: $clr-highlight-error-900;

    cds-icon {
      fill: $clr-highlight-error-900;
    }
  }
}

.highlight-text-success {
  color: $clr-highlight-success-700;

  cds-icon {
    fill: $clr-highlight-success-700;
  }

  &:hover {
    color: $clr-highlight-success-800;

    cds-icon {
      fill: $clr-highlight-success-800;
    }
  }
}

.highlight-text-warning {
  color: $clr-highlight-warning-800;

  cds-icon {
    fill: $clr-highlight-warning-800;
  }

  &:hover {
    color: $clr-highlight-warning-900;

    cds-icon {
      fill: $clr-highlight-warning-900;
    }
  }
}

.highlight-text-info {
  color: $clr-highlight-info-700;

  cds-icon {
    fill: $clr-highlight-info-700;
  }

  &:hover {
    color: $clr-highlight-info-800;

    cds-icon {
      fill: $clr-highlight-info-800;
    }
  }
}

clr-dropdown-menu .dropdown-header {
  min-height: 0.9rem;
}

// Has to be at the bottom to override the styles from the above properly
@import './mobile';
